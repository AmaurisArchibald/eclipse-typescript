var TypeScript;
(function (TypeScript) {
    (function (NodeType) {
        NodeType[NodeType["None"] = 0] = "None";
        NodeType[NodeType["List"] = 1] = "List";
        NodeType[NodeType["Script"] = 2] = "Script";

        NodeType[NodeType["TrueLiteral"] = 3] = "TrueLiteral";
        NodeType[NodeType["FalseLiteral"] = 4] = "FalseLiteral";
        NodeType[NodeType["StringLiteral"] = 5] = "StringLiteral";
        NodeType[NodeType["RegularExpressionLiteral"] = 6] = "RegularExpressionLiteral";
        NodeType[NodeType["NumericLiteral"] = 7] = "NumericLiteral";
        NodeType[NodeType["NullLiteral"] = 8] = "NullLiteral";

        NodeType[NodeType["TypeParameter"] = 9] = "TypeParameter";
        NodeType[NodeType["GenericType"] = 10] = "GenericType";
        NodeType[NodeType["TypeRef"] = 11] = "TypeRef";

        NodeType[NodeType["FunctionDeclaration"] = 12] = "FunctionDeclaration";
        NodeType[NodeType["ClassDeclaration"] = 13] = "ClassDeclaration";
        NodeType[NodeType["InterfaceDeclaration"] = 14] = "InterfaceDeclaration";
        NodeType[NodeType["ModuleDeclaration"] = 15] = "ModuleDeclaration";
        NodeType[NodeType["ImportDeclaration"] = 16] = "ImportDeclaration";
        NodeType[NodeType["VariableDeclarator"] = 17] = "VariableDeclarator";
        NodeType[NodeType["VariableDeclaration"] = 18] = "VariableDeclaration";
        NodeType[NodeType["Parameter"] = 19] = "Parameter";

        NodeType[NodeType["Name"] = 20] = "Name";
        NodeType[NodeType["ArrayLiteralExpression"] = 21] = "ArrayLiteralExpression";
        NodeType[NodeType["ObjectLiteralExpression"] = 22] = "ObjectLiteralExpression";
        NodeType[NodeType["OmittedExpression"] = 23] = "OmittedExpression";
        NodeType[NodeType["VoidExpression"] = 24] = "VoidExpression";
        NodeType[NodeType["CommaExpression"] = 25] = "CommaExpression";
        NodeType[NodeType["PlusExpression"] = 26] = "PlusExpression";
        NodeType[NodeType["NegateExpression"] = 27] = "NegateExpression";
        NodeType[NodeType["DeleteExpression"] = 28] = "DeleteExpression";
        NodeType[NodeType["ThisExpression"] = 29] = "ThisExpression";
        NodeType[NodeType["SuperExpression"] = 30] = "SuperExpression";
        NodeType[NodeType["InExpression"] = 31] = "InExpression";
        NodeType[NodeType["MemberAccessExpression"] = 32] = "MemberAccessExpression";
        NodeType[NodeType["InstanceOfExpression"] = 33] = "InstanceOfExpression";
        NodeType[NodeType["TypeOfExpression"] = 34] = "TypeOfExpression";
        NodeType[NodeType["ElementAccessExpression"] = 35] = "ElementAccessExpression";
        NodeType[NodeType["InvocationExpression"] = 36] = "InvocationExpression";
        NodeType[NodeType["ObjectCreationExpression"] = 37] = "ObjectCreationExpression";
        NodeType[NodeType["AssignmentExpression"] = 38] = "AssignmentExpression";
        NodeType[NodeType["AddAssignmentExpression"] = 39] = "AddAssignmentExpression";
        NodeType[NodeType["SubtractAssignmentExpression"] = 40] = "SubtractAssignmentExpression";
        NodeType[NodeType["DivideAssignmentExpression"] = 41] = "DivideAssignmentExpression";
        NodeType[NodeType["MultiplyAssignmentExpression"] = 42] = "MultiplyAssignmentExpression";
        NodeType[NodeType["ModuloAssignmentExpression"] = 43] = "ModuloAssignmentExpression";
        NodeType[NodeType["AndAssignmentExpression"] = 44] = "AndAssignmentExpression";
        NodeType[NodeType["ExclusiveOrAssignmentExpression"] = 45] = "ExclusiveOrAssignmentExpression";
        NodeType[NodeType["OrAssignmentExpression"] = 46] = "OrAssignmentExpression";
        NodeType[NodeType["LeftShiftAssignmentExpression"] = 47] = "LeftShiftAssignmentExpression";
        NodeType[NodeType["SignedRightShiftAssignmentExpression"] = 48] = "SignedRightShiftAssignmentExpression";
        NodeType[NodeType["UnsignedRightShiftAssignmentExpression"] = 49] = "UnsignedRightShiftAssignmentExpression";
        NodeType[NodeType["ConditionalExpression"] = 50] = "ConditionalExpression";
        NodeType[NodeType["LogicalOrExpression"] = 51] = "LogicalOrExpression";
        NodeType[NodeType["LogicalAndExpression"] = 52] = "LogicalAndExpression";
        NodeType[NodeType["BitwiseOrExpression"] = 53] = "BitwiseOrExpression";
        NodeType[NodeType["BitwiseExclusiveOrExpression"] = 54] = "BitwiseExclusiveOrExpression";
        NodeType[NodeType["BitwiseAndExpression"] = 55] = "BitwiseAndExpression";
        NodeType[NodeType["EqualsWithTypeConversionExpression"] = 56] = "EqualsWithTypeConversionExpression";
        NodeType[NodeType["NotEqualsWithTypeConversionExpression"] = 57] = "NotEqualsWithTypeConversionExpression";
        NodeType[NodeType["EqualsExpression"] = 58] = "EqualsExpression";
        NodeType[NodeType["NotEqualsExpression"] = 59] = "NotEqualsExpression";
        NodeType[NodeType["LessThanExpression"] = 60] = "LessThanExpression";
        NodeType[NodeType["LessThanOrEqualExpression"] = 61] = "LessThanOrEqualExpression";
        NodeType[NodeType["GreaterThanExpression"] = 62] = "GreaterThanExpression";
        NodeType[NodeType["GreaterThanOrEqualExpression"] = 63] = "GreaterThanOrEqualExpression";
        NodeType[NodeType["AddExpression"] = 64] = "AddExpression";
        NodeType[NodeType["SubtractExpression"] = 65] = "SubtractExpression";
        NodeType[NodeType["MultiplyExpression"] = 66] = "MultiplyExpression";
        NodeType[NodeType["DivideExpression"] = 67] = "DivideExpression";
        NodeType[NodeType["ModuloExpression"] = 68] = "ModuloExpression";
        NodeType[NodeType["LeftShiftExpression"] = 69] = "LeftShiftExpression";
        NodeType[NodeType["SignedRightShiftExpression"] = 70] = "SignedRightShiftExpression";
        NodeType[NodeType["UnsignedRightShiftExpression"] = 71] = "UnsignedRightShiftExpression";
        NodeType[NodeType["BitwiseNotExpression"] = 72] = "BitwiseNotExpression";
        NodeType[NodeType["LogicalNotExpression"] = 73] = "LogicalNotExpression";
        NodeType[NodeType["PreIncrementExpression"] = 74] = "PreIncrementExpression";
        NodeType[NodeType["PreDecrementExpression"] = 75] = "PreDecrementExpression";
        NodeType[NodeType["PostIncrementExpression"] = 76] = "PostIncrementExpression";
        NodeType[NodeType["PostDecrementExpression"] = 77] = "PostDecrementExpression";
        NodeType[NodeType["CastExpression"] = 78] = "CastExpression";
        NodeType[NodeType["ParenthesizedExpression"] = 79] = "ParenthesizedExpression";
        NodeType[NodeType["Member"] = 80] = "Member";

        NodeType[NodeType["Block"] = 81] = "Block";
        NodeType[NodeType["BreakStatement"] = 82] = "BreakStatement";
        NodeType[NodeType["ContinueStatement"] = 83] = "ContinueStatement";
        NodeType[NodeType["DebuggerStatement"] = 84] = "DebuggerStatement";
        NodeType[NodeType["DoStatement"] = 85] = "DoStatement";
        NodeType[NodeType["EmptyStatement"] = 86] = "EmptyStatement";
        NodeType[NodeType["ExportAssignment"] = 87] = "ExportAssignment";
        NodeType[NodeType["ExpressionStatement"] = 88] = "ExpressionStatement";
        NodeType[NodeType["ForInStatement"] = 89] = "ForInStatement";
        NodeType[NodeType["ForStatement"] = 90] = "ForStatement";
        NodeType[NodeType["IfStatement"] = 91] = "IfStatement";
        NodeType[NodeType["LabeledStatement"] = 92] = "LabeledStatement";
        NodeType[NodeType["ReturnStatement"] = 93] = "ReturnStatement";
        NodeType[NodeType["SwitchStatement"] = 94] = "SwitchStatement";
        NodeType[NodeType["ThrowStatement"] = 95] = "ThrowStatement";
        NodeType[NodeType["TryStatement"] = 96] = "TryStatement";
        NodeType[NodeType["VariableStatement"] = 97] = "VariableStatement";
        NodeType[NodeType["WhileStatement"] = 98] = "WhileStatement";
        NodeType[NodeType["WithStatement"] = 99] = "WithStatement";

        NodeType[NodeType["CaseClause"] = 100] = "CaseClause";
        NodeType[NodeType["CatchClause"] = 101] = "CatchClause";

        NodeType[NodeType["Comment"] = 102] = "Comment";
    })(TypeScript.NodeType || (TypeScript.NodeType = {}));
    var NodeType = TypeScript.NodeType;
})(TypeScript || (TypeScript = {}));
